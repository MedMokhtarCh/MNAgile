using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.JsonWebTokens;
using System.Security.Claims;
using UserService.Data;
using UserService.DTOs;
using UserService.Services;

namespace UserService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly AuthService _authService;
        private readonly AppDbContext _context;
        private readonly ILogger<AuthController> _logger;

        public AuthController(AuthService authService, AppDbContext context, ILogger<AuthController> logger)
        {
            _authService = authService;
            _context = context;
            _logger = logger;
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginRequest request)
        {
            if (request == null || string.IsNullOrEmpty(request.Email) || string.IsNullOrEmpty(request.Password))
            {
                _logger.LogWarning("Login request is invalid: Email or Password is empty.");
                return BadRequest("Les informations d'identification sont requises.");
            }

            if (!_authService.IsValidEmail(request.Email))
            {
                _logger.LogWarning("Invalid email format: {Email}", request.Email);
                return BadRequest("Format d'email invalide.");
            }

            try
            {
                _logger.LogInformation("Attempting to authenticate user: {Email}", request.Email);
                var user = await _authService.AuthenticateAsync(request.Email, request.Password);
                if (user == null)
                {
                    _logger.LogWarning("Authentication failed for user: {Email}", request.Email);
                    return Unauthorized("Email ou mot de passe incorrect.");
                }

                _logger.LogInformation("Generating JWT for user: {Email}", user.Email);
                var token = _authService.GenerateJwtToken(user);
                if (string.IsNullOrEmpty(token))
                {
                    _logger.LogError("Failed to generate JWT for user: {Email}", user.Email);
                    return StatusCode(500, new { message = "Erreur lors de la génération du token." });
                }

                _logger.LogInformation("Setting AuthToken cookie for user: {Email}", user.Email);
                Response.Cookies.Append("AuthToken", token, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.None,
                    Expires = DateTime.UtcNow.AddHours(24),
                    Path = "/"
                });

                _logger.LogInformation("AuthToken cookie set successfully for user: {Email}", user.Email);

                return Ok(new
                {
                    token = token,
                    user = new
                    {
                        id = user.Id,
                        email = user.Email,
                        firstName = user.FirstName,
                        lastName = user.LastName,
                        role = user.Role.Name,
                        roleId = user.RoleId,
                        claims = user.UserClaims.Select(uc => uc.Claim.Name).ToList()
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Internal error during login for user: {Email}", request.Email);
                return StatusCode(500, new { message = "Une erreur interne est survenue.", error = ex.Message });
            }
        }

        [HttpGet("me")]
        [Authorize]
        public async Task<IActionResult> GetCurrentUser()
        {
            try
            {
                _logger.LogInformation("Processing GetCurrentUser request");

                // Récupérer l'ID utilisateur depuis les claims
                var userIdClaim = User.FindFirst(JwtRegisteredClaimNames.Sub)?.Value
                               ?? User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (string.IsNullOrEmpty(userIdClaim) || !int.TryParse(userIdClaim, out var id))
                {
                    _logger.LogWarning("No valid userId found in token claims");
                    return Unauthorized("Utilisateur non authentifié.");
                }

                var user = await _context.Users
                    .Include(u => u.Role)
                    .Include(u => u.UserClaims)
                    .ThenInclude(uc => uc.Claim)
                    .FirstOrDefaultAsync(u => u.Id == id);

                if (user == null)
                {
                    _logger.LogWarning("User not found for id: {UserId}", id);
                    return NotFound("Utilisateur non trouvé.");
                }

                return Ok(new
                {
                    id = user.Id,
                    email = user.Email,
                    firstName = user.FirstName,
                    lastName = user.LastName,
                    role = user.Role.Name,
                    roleId = user.RoleId,
                    claims = user.UserClaims.Select(uc => uc.Claim.Name).ToList()
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in GetCurrentUser");
                return StatusCode(500, new { message = "Erreur lors de la récupération de l'utilisateur.", error = ex.Message });
            }
        }

        [HttpPost("logout")]
        public IActionResult Logout()
        {
            _logger.LogInformation("Processing logout request");
            Response.Cookies.Delete("AuthToken", new CookieOptions
            {
                HttpOnly = true,
                Secure = true,
                SameSite = SameSiteMode.None,
                Path = "/"
            });
            _logger.LogInformation("AuthToken cookie deleted successfully");
            return Ok(new { message = "Déconnexion réussie." });
        }
    }
}using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using UserService.Data;
using UserService.DTOs;
using UserService.Models;

namespace UserService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClaimsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public ClaimsController(AppDbContext context)
        {
            _context = context;
        }
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ClaimDTO>>> GetClaims()
        {
            try
            {
                var claims = await _context.Claims
                    .Select(c => new ClaimDTO
                    {
                        Id = c.Id,
                        Name = c.Name,
                        Description = c.Description
                    })
                    .ToListAsync();
                return Ok(claims);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Failed to fetch claims", error = ex.Message });
            }
        }
    }
   }
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using UserService.Data;
using UserService.Models;

namespace UserService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RolesController : ControllerBase
    {
        private readonly AppDbContext _context;

        public RolesController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Role>>> GetRoles()
        {
            try
            {
                var roles = await _context.Roles.ToListAsync();
                return Ok(roles);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Failed to fetch roles", error = ex.Message });
            }
        }
    }
}using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Hosting;
using System.Text.RegularExpressions;
using UserService.DTOs;
using UserService.Models;
using UserService.Services;

namespace UserService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UsersController : ControllerBase
    {
        private readonly Services.UserService _userService;
        private readonly AuthService _authService;
        private readonly ILogger<UsersController> _logger;
        private readonly IWebHostEnvironment _environment;

        public UsersController(Services.UserService userService, AuthService authService, ILogger<UsersController> logger, IWebHostEnvironment environment)
        {
            _userService = userService;
            _authService = authService;
            _logger = logger;
            _environment = environment;
        }

        [HttpPost]
        [Authorize(Policy = "CanCreateUsers")]
        public async Task<ActionResult<UserDTO>> CreateUser([FromBody] CreateUserRequest request)
        {
            _logger.LogInformation("Received create user request: {@Request}", request);

            // Manual validation
            if (request == null)
            {
                _logger.LogWarning("Create user request is null");
                return BadRequest("Les données utilisateur sont requises.");
            }
            if (string.IsNullOrEmpty(request.Email) || !_authService.IsValidEmail(request.Email))
            {
                _logger.LogWarning("Invalid email: {Email}", request.Email);
                return BadRequest("Un email valide est requis.");
            }
            if (string.IsNullOrEmpty(request.Password) || request.Password.Length < 12 ||
                !Regex.IsMatch(request.Password, @"[A-Z]") ||
                !Regex.IsMatch(request.Password, @"[a-z]") ||
                !Regex.IsMatch(request.Password, @"[0-9]") ||
                !Regex.IsMatch(request.Password, @"[!@#$%^&*]"))
            {
                _logger.LogWarning("Invalid password for user: {Email}", request.Email);
                return BadRequest("Le mot de passe doit contenir au moins 12 caractères, incluant majuscule, minuscule, chiffre et caractère spécial.");
            }
            if (string.IsNullOrEmpty(request.FirstName))
            {
                _logger.LogWarning("FirstName is required for user: {Email}", request.Email);
                return BadRequest("Le prénom est requis.");
            }
            if (string.IsNullOrEmpty(request.LastName))
            {
                _logger.LogWarning("LastName is required for user: {Email}", request.Email);
                return BadRequest("Le nom est requis.");
            }
            if (string.IsNullOrEmpty(request.PhoneNumber) || !Regex.IsMatch(request.PhoneNumber, @"^\+?[1-9]\d{1,14}$"))
            {
                _logger.LogWarning("Invalid phone number for user: {Email}", request.Email);
                return BadRequest("Un numéro de téléphone valide est requis.");
            }
            if (request.RoleId <= 0)
            {
                _logger.LogWarning("Invalid RoleId for user: {Email}", request.Email);
                return BadRequest("Un rôle valide est requis.");
            }

            // Restrict SuperAdmin creation to SuperAdmins only
            if (request.RoleId == 1)
            {
                var isSuperAdmin = User.HasClaim("RoleId", "1");
                if (!isSuperAdmin)
                {
                    _logger.LogWarning("Non-SuperAdmin attempted to create a SuperAdmin account: {Email}", request.Email);
                    return Forbid("Seul un SuperAdmin peut créer un compte SuperAdmin.");
                }
            }

            // Prevent SuperAdmin creation in production
            if (request.RoleId == 1 && _environment.IsProduction())
            {
                _logger.LogWarning("SuperAdmin creation attempted in production: {Email}", request.Email);
                return BadRequest("La création de comptes SuperAdmin n'est pas autorisée en production.");
            }

            if (await _userService.UserExistsAsync(request.Email))
            {
                _logger.LogWarning("Email already exists: {Email}", request.Email);
                return BadRequest("Un compte avec cet email existe déjà.");
            }

            if (!await _userService.RoleExistsAsync(request.RoleId))
            {
                _logger.LogWarning("Invalid role ID: {RoleId}", request.RoleId);
                return BadRequest("Le rôle spécifié n'existe pas.");
            }

            if ((request.RoleId == 3 || request.RoleId == 4) && string.IsNullOrEmpty(request.JobTitle))
            {
                _logger.LogWarning("JobTitle is required for role: {RoleId}", request.RoleId);
                return BadRequest("JobTitle est requis pour ce rôle.");
            }
            if (request.RoleId == 2 && string.IsNullOrEmpty(request.Entreprise))
            {
                _logger.LogWarning("Entreprise is required for role: {RoleId}", request.RoleId);
                return BadRequest("Entreprise est requise pour ce rôle.");
            }

            try
            {
                var user = new User
                {
                    Email = request.Email,
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    PhoneNumber = request.PhoneNumber,
                    JobTitle = request.JobTitle ?? "Default Job Title",
                    Entreprise = request.RoleId == 2 ? request.Entreprise : null,
                    RoleId = request.RoleId,
                    IsActive = true,
                    DateCreated = DateTime.UtcNow
                };

                var createdUser = await _userService.CreateUserAsync(user, request.ClaimIds ?? new List<int>());
                _logger.LogInformation($"User {user.Email} created successfully.");
                return CreatedAtAction(nameof(GetUserById), new { id = createdUser.Id }, MapUserToDTO(createdUser));
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error creating user: {ex.Message}");
                return StatusCode(500, $"Une erreur interne est survenue : {ex.Message}");
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<UserDTO>> GetUserById(int id)
        {
            var user = await _userService.GetUserByIdAsync(id);
            if (user == null)
            {
                return NotFound("Utilisateur non trouvé.");
            }
            return Ok(MapUserToDTO(user));
        }

        [HttpGet]
        [Authorize(Policy = "CanViewUsers")]
        public async Task<ActionResult<List<UserDTO>>> GetAllUsers()
        {
            var users = await _userService.GetAllUsersAsync();
            return Ok(users.Select(u => MapUserToDTO(u)).ToList());
        }

        [HttpPut("{id}")]
        [Authorize(Policy = "CanUpdateUsers")]
        public async Task<ActionResult<UserDTO>> UpdateUser(int id, [FromBody] UpdateUserRequest request)
        {
            var user = await _userService.GetUserByIdAsync(id);
            if (user == null)
            {
                _logger.LogWarning($"User with ID {id} not found.");
                return NotFound("Utilisateur non trouvé.");
            }

            // Manual validation
            if (!string.IsNullOrEmpty(request.Email) && !_authService.IsValidEmail(request.Email))
            {
                _logger.LogWarning("Invalid email: {Email}", request.Email);
                return BadRequest("Un email valide est requis.");
            }
            if (!string.IsNullOrEmpty(request.Password) &&
                (request.Password.Length < 12 ||
                 !Regex.IsMatch(request.Password, @"[A-Z]") ||
                 !Regex.IsMatch(request.Password, @"[a-z]") ||
                 !Regex.IsMatch(request.Password, @"[0-3]") ||
                 !Regex.IsMatch(request.Password, @"[!@#$%^&*]")))
            {
                _logger.LogWarning("Invalid password for user: {Email}", user.Email);
                return BadRequest("Le mot de passe doit contenir au moins 6 caractères, incluant majuscule, minuscule, chiffre et caractère spécial.");
            }
            if (!string.IsNullOrEmpty(request.PhoneNumber) && !Regex.IsMatch(request.PhoneNumber, @"^\+?[1-3]\d{1,14}$"))
            {
                _logger.LogWarning("Invalid phone number for user: {Email}", user.Email);
                return BadRequest("Un numéro de téléphone valide est requis.");
            }

            if (!string.IsNullOrEmpty(request.Email) && request.Email != user.Email)
            {
                if (await _userService.UserExistsAsync(request.Email))
                {
                    _logger.LogWarning($"Email {request.Email} already exists.");
                    return BadRequest("Un compte avec cet email existe déjà.");
                }
            }

            if (request.RoleId != 0 && !await _userService.RoleExistsAsync(request.RoleId))
            {
                _logger.LogWarning($"Invalid RoleId {request.RoleId} provided.");
                return BadRequest("Le rôle spécifié n'existe pas.");
            }

            var targetRoleId = request.RoleId != 0 ? request.RoleId : user.RoleId;
            if (new[] { 3, 4 }.Contains(targetRoleId) &&
                request.RoleId != 0 &&
                string.IsNullOrEmpty(request.JobTitle) &&
                string.IsNullOrEmpty(user.JobTitle))
            {
                _logger.LogWarning($"JobTitle is required for RoleId {targetRoleId}.");
                return BadRequest("JobTitle est requis pour ce rôle.");
            }
            if (targetRoleId == 2 && request.Entreprise == null && user.Entreprise == null)
            {
                _logger.LogWarning($"Entreprise is required for RoleId {targetRoleId}.");
                return BadRequest("Entreprise est requise pour ce rôle.");
            }

            user.Email = request.Email ?? user.Email;
            user.FirstName = request.FirstName ?? user.FirstName;
            user.LastName = request.LastName ?? user.LastName;
            user.PhoneNumber = request.PhoneNumber ?? user.PhoneNumber;
            user.JobTitle = request.JobTitle ?? user.JobTitle ?? "Non défini";
            user.Entreprise = targetRoleId == 2 ? (request.Entreprise ?? user.Entreprise ?? "") : user.Entreprise;
            user.RoleId = request.RoleId != 0 ? request.RoleId : user.RoleId;

            if (!string.IsNullOrEmpty(request.Password))
            {
                user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password);
            }

            var claimIds = request.ClaimIds ?? user.UserClaims?.Select(uc => uc.ClaimId).ToList() ?? new List<int>();

            try
            {
                var updatedUser = await _userService.UpdateUserAsync(user, claimIds);
                _logger.LogInformation($"User {user.Email} updated successfully with ClaimIds: {string.Join(", ", claimIds)}");
                return Ok(MapUserToDTO(updatedUser));
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error updating user {user.Email}: {ex.Message}");
                return StatusCode(500, $"Une erreur interne est survenue : {ex.Message}");
            }
        }

        [HttpDelete("{id}")]
        [Authorize(Policy = "CanDeleteUsers")]
        public async Task<ActionResult> DeleteUser(int id)
        {
            try
            {
                await _userService.DeleteUserAsync(id);
                _logger.LogInformation($"User with ID {id} deleted successfully.");
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error deleting user with ID {id}: {ex.Message}");
                return StatusCode(500, $"Une erreur interne est survenue : {ex.Message}");
            }
        }

        [HttpGet("exists")]
        public async Task<ActionResult<bool>> UserExists([FromQuery] string email)
        {
            if (string.IsNullOrEmpty(email) || !_authService.IsValidEmail(email))
            {
                return BadRequest("Un email valide est requis.");
            }
            var userExists = await _userService.UserExistsAsync(email);
            return Ok(userExists);
        }

        [HttpPatch("{id}/status")]
        public async Task<ActionResult> UpdateUserStatus(int id, [FromBody] UpdateUserStatusRequest request)
        {
            try
            {
                var user = await _userService.GetUserByIdAsync(id);
                if (user == null)
                {
                    return NotFound("Utilisateur non trouvé.");
                }

                user.IsActive = request.IsActive;
                await _userService.UpdateUserAsync(user, user.UserClaims?.Select(uc => uc.ClaimId).ToList() ?? new List<int>());
                _logger.LogInformation($"User {user.Email} status updated to {request.IsActive}");
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error updating user status: {ex.Message}");
                return StatusCode(500, $"Une erreur interne est survenue : {ex.Message}");
            }
        }

        private UserDTO MapUserToDTO(User user)
        {
            return new UserDTO
            {
                Id = user.Id,
                Email = user.Email,
                FirstName = user.FirstName,
                LastName = user.LastName,
                PhoneNumber = user.PhoneNumber,
                JobTitle = user.JobTitle,
                Entreprise = user.Entreprise,
                IsActive = user.IsActive,
                DateCreated = user.DateCreated,
                LastLogin = user.LastLogin,
                RoleId = user.RoleId,
                ClaimIds = user.UserClaims?.Select(uc => uc.ClaimId).ToList() ?? new List<int>()
            };
        }

        public class UpdateUserStatusRequest
        {
            public bool IsActive { get; set; }
        }
    }
}using Microsoft.EntityFrameworkCore;
using UserService.Models;

namespace UserService.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Claim> Claims { get; set; }
        public DbSet<UserClaim> UserClaims { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Seed roles
            modelBuilder.Entity<Role>().HasData(
                new Role { Id = 1, Name = "SuperAdmin" },
                new Role { Id = 2, Name = "Admin" },
                new Role { Id = 3, Name = "ChefProjet" },
                new Role { Id = 4, Name = "User" }
            );

            // Seed claims (fixed duplicate Id)
            modelBuilder.Entity<Claim>().HasData(
                new Claim { Id = 1, Name = "CanViewUsers", Description = "Permission de voir les utilisateurs" },
                new Claim { Id = 2, Name = "CanCreateUsers", Description = "Permission de créer des utilisateurs" },
                new Claim { Id = 3, Name = "CanUpdateUsers", Description = "Permission de mettre à jour les utilisateurs" },
                new Claim { Id = 4, Name = "CanDeleteUsers", Description = "Permission de supprimer des utilisateurs" },
                new Claim { Id = 5, Name = "CanViewProjects", Description = "Permission de voir les projets" },
                new Claim { Id = 6, Name = "CanAddProjects", Description = "Permission d'ajouter des projets" },
                new Claim { Id = 7, Name = "CanEditProjects", Description = "Permission de modifier des projets" },
               new Claim { Id = 8, Name = "CanDeleteProjects", Description = "Permission de supprimer des projets" },
               new Claim { Id = 9, Name = "CanViewTasks", Description = "Permission de voir les tâches" },
    new Claim { Id = 10, Name = "CanCreateTasks", Description = "Permission de créer des tâches" },
    new Claim { Id = 11, Name = "CanUpdateTasks", Description = "Permission de mettre à jour les tâches" },
    new Claim { Id = 12, Name = "CanDeleteTasks", Description = "Permission de supprimer des tâches" }

            );

            // Configure composite key for UserClaim
            modelBuilder.Entity<UserClaim>()
                .HasKey(uc => new { uc.UserId, uc.ClaimId });

            modelBuilder.Entity<UserClaim>()
                .HasOne(uc => uc.User)
                .WithMany(u => u.UserClaims)
                .HasForeignKey(uc => uc.UserId);

            modelBuilder.Entity<UserClaim>()
                .HasOne(uc => uc.Claim)
                .WithMany(c => c.UserClaims)
                .HasForeignKey(uc => uc.ClaimId);
        }
    }
}using Microsoft.EntityFrameworkCore;
using System.Text.RegularExpressions;
using UserService.Models;

namespace UserService.Data
{
    public static class DatabaseSeeder
    {
        public static void SeedDatabase(AppDbContext context, IWebHostEnvironment environment)
        {
            try
            {
                Console.WriteLine("Starting database seeding...");
                SeedSuperAdmin(context, environment);
                Console.WriteLine("Database seeding completed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'initialisation de la base de données: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"Exception interne: {ex.InnerException.Message}");
                }
                throw;
            }
        }

        private static void SeedSuperAdmin(AppDbContext context, IWebHostEnvironment environment)
        {
            try
            {
                Console.WriteLine("Vérification du SuperAdmin...");
                var superAdminRole = context.Roles.FirstOrDefault(r => r.Id == 1);
                if (superAdminRole == null)
                {
                    throw new InvalidOperationException("Le rôle SuperAdmin (Id = 1) n'existe pas.");
                }

                var superAdminUser = context.Users.FirstOrDefault(u => u.RoleId == 1 && u.Email == "superadmin@gmail.com");
                if (superAdminUser == null)
                {
                    Console.WriteLine("Création du SuperAdmin...");
                    var password = Environment.GetEnvironmentVariable("SUPERADMIN_PASSWORD");

                    // Fallback for development only
                    if (environment.IsDevelopment() && string.IsNullOrEmpty(password))
                    {
                        password = "DefaultSuperAdmin123!";
                        Console.WriteLine("SUPERADMIN_PASSWORD non défini. Utilisation du mot de passe par défaut pour le développement: DefaultSuperAdmin123!");
                    }

                    if (string.IsNullOrEmpty(password))
                    {
                        throw new InvalidOperationException("Le mot de passe du SuperAdmin doit être défini dans SUPERADMIN_PASSWORD.");
                    }

                    if (password.Length < 12 ||
                        !Regex.IsMatch(password, @"[A-Z]") ||
                        !Regex.IsMatch(password, @"[a-z]") ||
                        !Regex.IsMatch(password, @"[0-9]") ||
                        !Regex.IsMatch(password, @"[!@#$%^&*]"))
                    {
                        throw new InvalidOperationException("Le mot de passe du SuperAdmin doit contenir au moins 12 caractères, incluant majuscule, minuscule, chiffre et caractère spécial.");
                    }

                    var superAdmin = new User
                    {
                        Email = "superadmin@gmail.com",
                        PasswordHash = BCrypt.Net.BCrypt.HashPassword(password),
                        FirstName = "Super",
                        LastName = "Admin",
                        PhoneNumber = "1234567890",
                        RoleId = 1,
                        IsActive = true,
                        DateCreated = DateTime.UtcNow
                    };

                    context.Users.Add(superAdmin);
                    context.SaveChanges();

                    var claims = context.Claims.ToList();
                    foreach (var claim in claims)
                    {
                        context.UserClaims.Add(new UserClaim { UserId = superAdmin.Id, ClaimId = claim.Id });
                    }
                    context.SaveChanges();
                    Console.WriteLine("SuperAdmin créé avec tous les claims.");
                }
                else
                {
                    Console.WriteLine($"Le SuperAdmin existe déjà avec ID: {superAdminUser.Id}");
                }
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Erreur lors de la création du SuperAdmin: {ex.InnerException?.Message ?? ex.Message}");
                throw;
            }
        }
    }
}namespace UserService.DTOs
{
    public class ClaimDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }
}namespace UserService.DTOs
{
    public class CreateUserRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
        public string JobTitle { get; set; }
        public string Entreprise { get; set; } 
        public int RoleId { get; set; }
        public List<int> ClaimIds { get; set; } = new List<int>();
    }
}namespace UserService.DTOs
{
    public class LoginRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}namespace UserService.DTOs
{
    public class UpdateUserRequest
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? PhoneNumber { get; set; }
        public string? JobTitle { get; set; }
        public string? Entreprise { get; set; }
        public int RoleId { get; set; } // 0 indicates no change
        public List<int>? ClaimIds { get; set; }
    }
}namespace UserService.DTOs
{
    public class UserDTO
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
        public string JobTitle { get; set; }
        public string Entreprise { get; set; }
        public bool IsActive { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime? LastLogin { get; set; }
        public int RoleId { get; set; }
        public List<int> ClaimIds { get; set; } = new List<int>();
        public List<ClaimDTO> Claims { get; set; } = new List<ClaimDTO>();
    }
}using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Text.RegularExpressions;
using UserService.Data;
using UserService.Models;
using Claim = System.Security.Claims.Claim;

namespace UserService.Services
{
    public class AuthService
    {
        private readonly AppDbContext _context;
        private readonly IConfiguration _configuration;

        public AuthService(AppDbContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        public async Task<User> AuthenticateAsync(string email, string password)
        {
            var user = await _context.Users
                .Include(u => u.Role)
                .Include(u => u.UserClaims)
                .ThenInclude(uc => uc.Claim)
                .FirstOrDefaultAsync(u => u.Email == email);

            if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
            {
                return null;
            }
            
            // Vérifiez si l'utilisateur est actif
            if (!user.IsActive)
            {
                return null;
            }

            user.LastLogin = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            return user;
        }

        public string GenerateJwtToken(User user)
        {
            var jwtSettings = _configuration.GetSection("Jwt");
            var key = Encoding.ASCII.GetBytes(jwtSettings["Key"]);

            var claims = new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim("RoleId", user.RoleId.ToString()),
                new Claim("Role", user.Role.Name)
            };

            foreach (var userClaim in user.UserClaims)
            {
                claims.Add(new Claim(userClaim.Claim.Name, "true"));
            }

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.UtcNow.AddHours(24),
                NotBefore = DateTime.UtcNow,
                Issuer = jwtSettings["Issuer"],
                Audience = jwtSettings["Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            var token = tokenHandler.CreateToken(tokenDescriptor);

            return tokenHandler.WriteToken(token);
        }

        public bool IsValidEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
                return false;

            try
            {
                var regex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
                return regex.IsMatch(email);
            }
            catch
            {
                return false;
            }
        }
    }
}using Microsoft.EntityFrameworkCore;
using UserService.Data;
using UserService.Models;

namespace UserService.Services
{
    public class UserService
    {
        private readonly AppDbContext _context;
        private readonly ILogger<UserService> _logger;

        public UserService(AppDbContext context, ILogger<UserService> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task<bool> RoleExistsAsync(int roleId)
        {
            return await _context.Roles.AnyAsync(r => r.Id == roleId);
        }

        public async Task<User> CreateUserAsync(User user, List<int> claimIds)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                if (await _context.Users.AnyAsync(u => u.Email == user.Email))
                {
                    throw new InvalidOperationException("Un compte avec cet email existe déjà.");
                }

                user.DateCreated = DateTime.UtcNow;
                user.IsActive = true;
                _context.Users.Add(user);
                await _context.SaveChangesAsync();

                // Assign default claims based on role
                if (user.RoleId == 1) // SuperAdmin
                {
                    claimIds = await _context.Claims.Select(c => c.Id).ToListAsync();
                }
                else if (user.RoleId == 2) // Admin
                {
                    var defaultAdminClaims = await _context.Claims
                        .Where(c => c.Name == "CanViewUsers" || c.Name == "CanCreateUsers")
                        .Select(c => c.Id)
                        .ToListAsync();
                    claimIds.AddRange(defaultAdminClaims);
                }
                else if (user.RoleId == 3) // ChefProjet
                {
                    var defaultChefProjetClaims = await _context.Claims
                        .Where(c => c.Name == "CanViewUsers")
                        .Select(c => c.Id)
                        .ToListAsync();
                    claimIds.AddRange(defaultChefProjetClaims);
                }

                // Ensure claimIds are unique and valid
                claimIds = claimIds.Distinct().ToList();
                foreach (var claimId in claimIds)
                {
                    if (!await _context.Claims.AnyAsync(c => c.Id == claimId))
                    {
                        throw new InvalidOperationException($"Claim ID {claimId} n'existe pas.");
                    }
                    _context.UserClaims.Add(new UserClaim { UserId = user.Id, ClaimId = claimId });
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                _logger.LogInformation($"User {user.Email} created successfully.");
                return user;
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError($"Error creating user {user.Email}: {ex.Message}");
                throw;
            }
        }

        public async Task<User> GetUserByIdAsync(int id)
        {
            return await _context.Users
                .Include(u => u.Role)
                .Include(u => u.UserClaims)
                .ThenInclude(uc => uc.Claim)
                .FirstOrDefaultAsync(u => u.Id == id);
        }

        public async Task<List<User>> GetAllUsersAsync()
        {
            return await _context.Users
                .Include(u => u.Role)
                .Include(u => u.UserClaims)
                .ThenInclude(uc => uc.Claim)
                .ToListAsync();
        }

        public async Task<User> UpdateUserAsync(User user, List<int> claimIds)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                if (await _context.Users.AnyAsync(u => u.Email == user.Email && u.Id != user.Id))
                {
                    throw new InvalidOperationException("Un compte avec cet email existe déjà.");
                }

                foreach (var claimId in claimIds)
                {
                    if (!await _context.Claims.AnyAsync(c => c.Id == claimId))
                    {
                        throw new InvalidOperationException($"Claim ID {claimId} does not exist.");
                    }
                }

                _context.Users.Update(user);

                var existingClaims = await _context.UserClaims.Where(uc => uc.UserId == user.Id).ToListAsync();
                _context.UserClaims.RemoveRange(existingClaims);

                foreach (var claimId in claimIds)
                {
                    _context.UserClaims.Add(new UserClaim { UserId = user.Id, ClaimId = claimId });
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                _logger.LogInformation($"User {user.Email} updated successfully with claimIds: {string.Join(", ", claimIds)}");
                return user;
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError($"Error updating user {user.Email}: {ex.Message}");
                throw;
            }
        }

        public async Task DeleteUserAsync(int id)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var user = await _context.Users.FindAsync(id);
                if (user != null)
                {
                    _context.Users.Remove(user);
                    await _context.SaveChangesAsync();
                    await transaction.CommitAsync();
                    _logger.LogInformation($"User {user.Email} deleted successfully.");
                }
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError($"Error deleting user with ID {id}: {ex.Message}");
                throw;
            }
        }

        public async Task<bool> UserExistsAsync(string email)
        {
            return await _context.Users.AnyAsync(u => u.Email == email);
        }
    }
}{
    "ConnectionStrings": {
        "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=UserServiceDB;Trusted_Connection=True;TrustServerCertificate=True;"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*",
    "Jwt": {
        "Key": "ThisIsAVeryLongAndSecureKeyFor2025AuthenticationService1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "Issuer": "UserService",
        "Audience": "UserServiceClients",
        "ExpireHours": 24
    }



}using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using UserService.Data;
using UserService.Middleware;
using UserService.Services;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Authorization;

var builder = WebApplication.CreateBuilder(args);

// Add CORS policy
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontend", policy =>
    {
        policy.WithOrigins("http://localhost:5173")
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

// Configure DbContext
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"))
           .EnableSensitiveDataLogging()
           .EnableDetailedErrors());

// Register services
builder.Services.AddScoped<UserService.Services.UserService>();
builder.Services.AddScoped<AuthService>();
builder.Services.AddHttpContextAccessor();

// Configure JWT authentication
var jwtSettings = builder.Configuration.GetSection("Jwt");
var keyValue = jwtSettings["Key"] ?? Environment.GetEnvironmentVariable("JWT_KEY");
if (string.IsNullOrEmpty(keyValue))
{
    throw new InvalidOperationException("JWT Key is not configured.");
}
var key = Encoding.ASCII.GetBytes(keyValue);
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = true;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(key)
    };
    options.Events = new JwtBearerEvents
    {
        OnMessageReceived = context =>
        {
            // Vérifier l'en-tête Authorization
            string authHeader = context.Request.Headers["Authorization"];
            if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
            {
                context.Token = authHeader.Substring("Bearer ".Length).Trim();
            }
            // Si pas d'en-tête, vérifier le cookie AuthToken
            else if (context.Request.Cookies.ContainsKey("AuthToken"))
            {
                context.Token = context.Request.Cookies["AuthToken"];
            }
            return Task.CompletedTask;
        }
    };
});

// Configure authorization policies
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("SuperAdminOnly", policy => policy.RequireClaim("RoleId", "1"));
    options.AddPolicy("AdminOnly", policy => policy.RequireClaim("RoleId", "2"));
    options.AddPolicy("SuperAdminOrAdmin", policy => policy.RequireClaim("RoleId", "1", "2"));
    options.AddPolicy("CanViewUsers", policy => policy.RequireAssertion(context =>
        context.User.HasClaim("RoleId", "1") || context.User.HasClaim(c => c.Type == "CanViewUsers")));
    options.AddPolicy("CanCreateUsers", policy => policy.RequireAssertion(context =>
        context.User.HasClaim("RoleId", "1") || context.User.HasClaim(c => c.Type == "CanCreateUsers")));
    options.AddPolicy("CanUpdateUsers", policy => policy.RequireAssertion(context =>
        context.User.HasClaim("RoleId", "1") || context.User.HasClaim(c => c.Type == "CanUpdateUsers")));
    options.AddPolicy("CanDeleteUsers", policy => policy.RequireAssertion(context =>
        context.User.HasClaim("RoleId", "1") || context.User.HasClaim(c => c.Type == "CanDeleteUsers")));
    options.DefaultPolicy = new AuthorizationPolicyBuilder()
        .RequireAuthenticatedUser()
        .Build();
});

// Add CSRF protection
builder.Services.AddAntiforgery();

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "UserService API", Version = "v1" });
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme.",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        BearerFormat = "JWT"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

var app = builder.Build();

// Use CORS policy
app.UseCors("AllowFrontend");

// Middleware for exception handling
app.UseMiddleware<ExceptionMiddleware>();

// Seed database
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    try
    {
        dbContext.Database.Migrate();
        DatabaseSeeder.SeedDatabase(dbContext, app.Environment);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erreur lors de l'initialisation de la base de données: {ex.Message}");
        throw;
    }
}

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAntiforgery();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.Run();