// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Data;

#nullable disable

namespace UserService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserService.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Permission de voir les utilisateurs",
                            Name = "CanViewUsers"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Permission de créer des utilisateurs",
                            Name = "CanCreateUsers"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Permission de mettre à jour les utilisateurs",
                            Name = "CanUpdateUsers"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Permission de supprimer des utilisateurs",
                            Name = "CanDeleteUsers"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Permission de voir les projets",
                            Name = "CanViewProjects"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Permission d'ajouter des projets",
                            Name = "CanAddProjects"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Permission de modifier des projets",
                            Name = "CanEditProjects"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Permission de supprimer des projets",
                            Name = "CanDeleteProjects"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Permission de voir les tâches",
                            Name = "CanViewTasks"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Permission de créer des tâches",
                            Name = "CanCreateTasks"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Permission de mettre à jour les tâches",
                            Name = "CanUpdateTasks"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Permission de supprimer des tâches",
                            Name = "CanDeleteTasks"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Permission de communiquer dans les canaux",
                            Name = "CanCommunicate"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Permission de créer et gérer des canaux",
                            Name = "CanCreateChannel"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Permission de voir les backlogs",
                            Name = "CanViewBacklogs"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Permission de créer des backlogs",
                            Name = "CanCreateBacklogs"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Permission de mettre à jour les backlogs",
                            Name = "CanUpdateBacklogs"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Permission de supprimer des backlogs",
                            Name = "CanDeleteBacklogs"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Permission de voir les colonnes Kanban",
                            Name = "CanViewKanbanColumns"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Permission de créer des colonnes Kanban",
                            Name = "CanCreateKanbanColumns"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Permission de mettre à jour les colonnes Kanban",
                            Name = "CanUpdateKanbanColumns"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Permission de supprimer des colonnes Kanban",
                            Name = "CanDeleteKanbanColumns"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Permission de voir les sprints",
                            Name = "CanViewSprints"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Permission de créer des sprints",
                            Name = "CanCreateSprints"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Permission de mettre à jour les sprints",
                            Name = "CanUpdateSprints"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Permission de supprimer des sprints",
                            Name = "CanDeleteSprints"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Permission de déplacer les tâches",
                            Name = "CanMoveTasks"
                        });
                });

            modelBuilder.Entity("UserService.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 0,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 0,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 0,
                            Name = "ChefProjet"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserId = 0,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("UserService.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("UserService.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CostPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CostPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Entreprise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RootAdminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RootAdminId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserService.Models.UserClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("UserService.Models.Subscription", b =>
                {
                    b.HasOne("UserService.Models.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("UserService.Models.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Models.User", b =>
                {
                    b.HasOne("UserService.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserService.Models.User", "RootAdmin")
                        .WithMany()
                        .HasForeignKey("RootAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("RootAdmin");
                });

            modelBuilder.Entity("UserService.Models.UserClaim", b =>
                {
                    b.HasOne("UserService.Models.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Models.Claim", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("UserService.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserService.Models.User", b =>
                {
                    b.Navigation("Subscription")
                        .IsRequired();

                    b.Navigation("UserClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
